{"ast":null,"code":"import _objectSpread from\"C:/Users/User/Documents/GitHub/MediScan-AI/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Upload skin/X-ray images component\nimport React,{useState,useCallback}from'react';import{useDropzone}from'react-dropzone';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const UploadImage=_ref=>{let{onImageUpload,analysisType='skin'}=_ref;const[uploadedImage,setUploadedImage]=useState(null);const[isAnalyzing,setIsAnalyzing]=useState(false);const onDrop=useCallback(acceptedFiles=>{const file=acceptedFiles[0];if(file){const reader=new FileReader();reader.onload=()=>{setUploadedImage({file,preview:reader.result,name:file.name,size:file.size});};reader.readAsDataURL(file);}},[]);const{getRootProps,getInputProps,isDragActive}=useDropzone({onDrop,accept:{'image/*':['.jpeg','.jpg','.png','.bmp']},maxFiles:1,maxSize:10*1024*1024// 10MB\n});const handleAnalyze=async()=>{if(!uploadedImage)return;setIsAnalyzing(true);try{const formData=new FormData();formData.append('file',uploadedImage.file);const endpoint=analysisType==='skin'?'/api/v1/skin-analysis':'/api/v1/radiology-analysis';const response=await fetch(\"\".concat(process.env.REACT_APP_API_URL).concat(endpoint),{method:'POST',body:formData});if(!response.ok){throw new Error('Analysis failed');}const result=await response.json();onImageUpload(result,uploadedImage);}catch(error){console.error('Analysis error:',error);// Handle error (show notification, etc.)\n}finally{setIsAnalyzing(false);}};const clearImage=()=>{setUploadedImage(null);};return/*#__PURE__*/_jsxs(\"div\",{className:\"upload-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"upload-section\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Upload \",analysisType==='skin'?'Skin Lesion':'X-ray',\" Image\"]}),!uploadedImage?/*#__PURE__*/_jsxs(\"div\",_objectSpread(_objectSpread({},getRootProps()),{},{className:\"dropzone \".concat(isDragActive?'active':''),children:[/*#__PURE__*/_jsx(\"input\",_objectSpread({},getInputProps())),/*#__PURE__*/_jsxs(\"div\",{className:\"dropzone-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"upload-icon\",children:\"\\uD83D\\uDCC1\"}),/*#__PURE__*/_jsx(\"p\",{children:isDragActive?'Drop the image here...':'Drag & drop an image here, or click to select'}),/*#__PURE__*/_jsx(\"p\",{className:\"upload-info\",children:\"Supported formats: JPEG, PNG, BMP (Max 10MB)\"})]})]})):/*#__PURE__*/_jsxs(\"div\",{className:\"image-preview\",children:[/*#__PURE__*/_jsx(\"img\",{src:uploadedImage.preview,alt:\"Uploaded\",className:\"preview-image\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"image-info\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"File:\"}),\" \",uploadedImage.name]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Size:\"}),\" \",(uploadedImage.size/1024/1024).toFixed(2),\" MB\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"image-actions\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleAnalyze,disabled:isAnalyzing,className:\"btn btn-primary\",children:isAnalyzing?'Analyzing...':'Analyze Image'}),/*#__PURE__*/_jsx(\"button\",{onClick:clearImage,className:\"btn btn-secondary\",disabled:isAnalyzing,children:\"Clear\"})]})]})]}),analysisType==='skin'&&/*#__PURE__*/_jsxs(\"div\",{className:\"guidelines\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Image Guidelines for Skin Analysis:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Ensure good lighting and clear focus\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Include a ruler or coin for size reference if possible\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Capture the entire lesion and surrounding skin\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Avoid shadows or reflections\"})]})]}),analysisType==='radiology'&&/*#__PURE__*/_jsxs(\"div\",{className:\"guidelines\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Image Guidelines for X-ray Analysis:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Upload clear, high-resolution X-ray images\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Ensure proper contrast and brightness\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Include patient positioning information if available\"}),/*#__PURE__*/_jsx(\"li\",{children:\"DICOM format preferred, but JPEG/PNG accepted\"})]})]})]});};export default UploadImage;","map":{"version":3,"names":["React","useState","useCallback","useDropzone","jsxs","_jsxs","jsx","_jsx","UploadImage","_ref","onImageUpload","analysisType","uploadedImage","setUploadedImage","isAnalyzing","setIsAnalyzing","onDrop","acceptedFiles","file","reader","FileReader","onload","preview","result","name","size","readAsDataURL","getRootProps","getInputProps","isDragActive","accept","maxFiles","maxSize","handleAnalyze","formData","FormData","append","endpoint","response","fetch","concat","process","env","REACT_APP_API_URL","method","body","ok","Error","json","error","console","clearImage","className","children","_objectSpread","src","alt","toFixed","onClick","disabled"],"sources":["C:/Users/User/Documents/GitHub/MediScan-AI/frontend/src/components/UploadImage.jsx"],"sourcesContent":["// Upload skin/X-ray images component\nimport React, { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nconst UploadImage = ({ onImageUpload, analysisType = 'skin' }) => {\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setUploadedImage({\n          file,\n          preview: reader.result,\n          name: file.name,\n          size: file.size\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.bmp']\n    },\n    maxFiles: 1,\n    maxSize: 10 * 1024 * 1024 // 10MB\n  });\n\n  const handleAnalyze = async () => {\n    if (!uploadedImage) return;\n\n    setIsAnalyzing(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', uploadedImage.file);\n\n      const endpoint = analysisType === 'skin' \n        ? '/api/v1/skin-analysis' \n        : '/api/v1/radiology-analysis';\n\n      const response = await fetch(`${process.env.REACT_APP_API_URL}${endpoint}`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Analysis failed');\n      }\n\n      const result = await response.json();\n      onImageUpload(result, uploadedImage);\n    } catch (error) {\n      console.error('Analysis error:', error);\n      // Handle error (show notification, etc.)\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const clearImage = () => {\n    setUploadedImage(null);\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload-section\">\n        <h3>\n          Upload {analysisType === 'skin' ? 'Skin Lesion' : 'X-ray'} Image\n        </h3>\n        \n        {!uploadedImage ? (\n          <div\n            {...getRootProps()}\n            className={`dropzone ${isDragActive ? 'active' : ''}`}\n          >\n            <input {...getInputProps()} />\n            <div className=\"dropzone-content\">\n              <div className=\"upload-icon\">üìÅ</div>\n              <p>\n                {isDragActive\n                  ? 'Drop the image here...'\n                  : 'Drag & drop an image here, or click to select'}\n              </p>\n              <p className=\"upload-info\">\n                Supported formats: JPEG, PNG, BMP (Max 10MB)\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"image-preview\">\n            <img\n              src={uploadedImage.preview}\n              alt=\"Uploaded\"\n              className=\"preview-image\"\n            />\n            <div className=\"image-info\">\n              <p><strong>File:</strong> {uploadedImage.name}</p>\n              <p><strong>Size:</strong> {(uploadedImage.size / 1024 / 1024).toFixed(2)} MB</p>\n            </div>\n            <div className=\"image-actions\">\n              <button\n                onClick={handleAnalyze}\n                disabled={isAnalyzing}\n                className=\"btn btn-primary\"\n              >\n                {isAnalyzing ? 'Analyzing...' : 'Analyze Image'}\n              </button>\n              <button\n                onClick={clearImage}\n                className=\"btn btn-secondary\"\n                disabled={isAnalyzing}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {analysisType === 'skin' && (\n        <div className=\"guidelines\">\n          <h4>Image Guidelines for Skin Analysis:</h4>\n          <ul>\n            <li>Ensure good lighting and clear focus</li>\n            <li>Include a ruler or coin for size reference if possible</li>\n            <li>Capture the entire lesion and surrounding skin</li>\n            <li>Avoid shadows or reflections</li>\n          </ul>\n        </div>\n      )}\n\n      {analysisType === 'radiology' && (\n        <div className=\"guidelines\">\n          <h4>Image Guidelines for X-ray Analysis:</h4>\n          <ul>\n            <li>Upload clear, high-resolution X-ray images</li>\n            <li>Ensure proper contrast and brightness</li>\n            <li>Include patient positioning information if available</li>\n            <li>DICOM format preferred, but JPEG/PNG accepted</li>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UploadImage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}