{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\MediScan-AI\\\\frontend\\\\src\\\\components\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\n// Triage assistant chat interface component\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = ({\n  onTriageComplete\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hello! I'm your virtual triage assistant. I can help assess your symptoms and provide guidance. What symptoms are you experiencing today?\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentAssessment, setCurrentAssessment] = useState({\n    symptoms: [],\n    responses: []\n  });\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!inputMessage.trim()) return;\n    const userMessage = {\n      id: messages.length + 1,\n      text: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setCurrentAssessment(prev => ({\n      ...prev,\n      responses: [...prev.responses, inputMessage]\n    }));\n    setInputMessage('');\n    setIsTyping(true);\n    try {\n      // Send message to triage API\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/triage/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: inputMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get response');\n      }\n      const data = await response.json();\n      const botMessage = {\n        id: messages.length + 2,\n        text: data.response,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // Check if we have enough information for assessment\n      if (currentAssessment.responses.length >= 3) {\n        setTimeout(() => {\n          performTriageAssessment();\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Chat error:', error);\n      const errorMessage = {\n        id: messages.length + 2,\n        text: \"I'm sorry, I'm having trouble processing your message right now. Please try again.\",\n        sender: 'bot',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const performTriageAssessment = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/triage`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          symptoms: extractSymptoms(currentAssessment.responses)\n          // Add other relevant data\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Assessment failed');\n      }\n      const assessment = await response.json();\n      const assessmentMessage = {\n        id: messages.length + 1,\n        text: formatAssessmentMessage(assessment),\n        sender: 'bot',\n        timestamp: new Date(),\n        isAssessment: true\n      };\n      setMessages(prev => [...prev, assessmentMessage]);\n      if (onTriageComplete) {\n        onTriageComplete(assessment);\n      }\n    } catch (error) {\n      console.error('Assessment error:', error);\n    }\n  };\n  const extractSymptoms = responses => {\n    // Simple symptom extraction - in practice, use NLP\n    const commonSymptoms = ['headache', 'fever', 'cough', 'pain', 'nausea', 'fatigue', 'dizziness', 'shortness of breath', 'chest pain'];\n    const extractedSymptoms = [];\n    responses.forEach(response => {\n      commonSymptoms.forEach(symptom => {\n        if (response.toLowerCase().includes(symptom)) {\n          extractedSymptoms.push(symptom);\n        }\n      });\n    });\n    return [...new Set(extractedSymptoms)]; // Remove duplicates\n  };\n  const formatAssessmentMessage = assessment => {\n    return `\nBased on our conversation, here's my assessment:\n\n**Urgency Level:** ${assessment.urgency_level.toUpperCase()}\n\n**Possible Conditions:**\n${assessment.possible_conditions.map(condition => `• ${condition}`).join('\\n')}\n\n**Recommendations:**\n${assessment.recommendations.map(rec => `• ${rec}`).join('\\n')}\n\n**Next Steps:**\n${assessment.next_steps.map(step => `• ${step}`).join('\\n')}\n\n*Please note: This assessment is for informational purposes only and should not replace professional medical advice.*\n    `;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n  const quickResponses = [\"I have a headache\", \"I'm feeling nauseous\", \"I have chest pain\", \"I'm having trouble breathing\", \"I have a fever\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83E\\uDE7A Virtual Triage Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Describe your symptoms for personalized guidance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender} ${message.isError ? 'error' : ''} ${message.isAssessment ? 'assessment' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"message-text\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: message.timestamp.toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot typing\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quick-responses\",\n      children: quickResponses.map((response, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quick-response-btn\",\n        onClick: () => setInputMessage(response),\n        children: response\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: inputRef,\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Describe your symptoms...\",\n          rows: \"2\",\n          disabled: isTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: !inputMessage.trim() || isTyping,\n          className: \"send-btn\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-disclaimer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u26A0\\uFE0F This is not a substitute for professional medical advice. In case of emergency, call 911 immediately.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"7q5fArP+otV6m32AUrYGjHJk6tI=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ChatBot","onTriageComplete","_s","messages","setMessages","id","text","sender","timestamp","Date","inputMessage","setInputMessage","isTyping","setIsTyping","currentAssessment","setCurrentAssessment","symptoms","responses","messagesEndRef","inputRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","trim","userMessage","length","prev","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","message","ok","Error","data","json","botMessage","setTimeout","performTriageAssessment","error","console","errorMessage","isError","extractSymptoms","assessment","assessmentMessage","formatAssessmentMessage","isAssessment","commonSymptoms","extractedSymptoms","forEach","symptom","toLowerCase","includes","push","Set","urgency_level","toUpperCase","possible_conditions","map","condition","join","recommendations","rec","next_steps","step","handleKeyPress","e","key","shiftKey","preventDefault","quickResponses","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","ref","index","onClick","value","onChange","target","onKeyPress","placeholder","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/MediScan-AI/frontend/src/components/ChatBot.jsx"],"sourcesContent":["// Triage assistant chat interface component\nimport React, { useState, useRef, useEffect } from 'react';\n\nconst ChatBot = ({ onTriageComplete }) => {\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      text: \"Hello! I'm your virtual triage assistant. I can help assess your symptoms and provide guidance. What symptoms are you experiencing today?\",\n      sender: 'bot',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentAssessment, setCurrentAssessment] = useState({\n    symptoms: [],\n    responses: []\n  });\n  \n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage = {\n      id: messages.length + 1,\n      text: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setCurrentAssessment(prev => ({\n      ...prev,\n      responses: [...prev.responses, inputMessage]\n    }));\n    \n    setInputMessage('');\n    setIsTyping(true);\n\n    try {\n      // Send message to triage API\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/triage/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: inputMessage }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get response');\n      }\n\n      const data = await response.json();\n      \n      const botMessage = {\n        id: messages.length + 2,\n        text: data.response,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n\n      // Check if we have enough information for assessment\n      if (currentAssessment.responses.length >= 3) {\n        setTimeout(() => {\n          performTriageAssessment();\n        }, 1000);\n      }\n\n    } catch (error) {\n      console.error('Chat error:', error);\n      const errorMessage = {\n        id: messages.length + 2,\n        text: \"I'm sorry, I'm having trouble processing your message right now. Please try again.\",\n        sender: 'bot',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const performTriageAssessment = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/triage`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          symptoms: extractSymptoms(currentAssessment.responses),\n          // Add other relevant data\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Assessment failed');\n      }\n\n      const assessment = await response.json();\n      \n      const assessmentMessage = {\n        id: messages.length + 1,\n        text: formatAssessmentMessage(assessment),\n        sender: 'bot',\n        timestamp: new Date(),\n        isAssessment: true\n      };\n\n      setMessages(prev => [...prev, assessmentMessage]);\n      \n      if (onTriageComplete) {\n        onTriageComplete(assessment);\n      }\n\n    } catch (error) {\n      console.error('Assessment error:', error);\n    }\n  };\n\n  const extractSymptoms = (responses) => {\n    // Simple symptom extraction - in practice, use NLP\n    const commonSymptoms = [\n      'headache', 'fever', 'cough', 'pain', 'nausea', 'fatigue',\n      'dizziness', 'shortness of breath', 'chest pain'\n    ];\n    \n    const extractedSymptoms = [];\n    responses.forEach(response => {\n      commonSymptoms.forEach(symptom => {\n        if (response.toLowerCase().includes(symptom)) {\n          extractedSymptoms.push(symptom);\n        }\n      });\n    });\n    \n    return [...new Set(extractedSymptoms)]; // Remove duplicates\n  };\n\n  const formatAssessmentMessage = (assessment) => {\n    return `\nBased on our conversation, here's my assessment:\n\n**Urgency Level:** ${assessment.urgency_level.toUpperCase()}\n\n**Possible Conditions:**\n${assessment.possible_conditions.map(condition => `• ${condition}`).join('\\n')}\n\n**Recommendations:**\n${assessment.recommendations.map(rec => `• ${rec}`).join('\\n')}\n\n**Next Steps:**\n${assessment.next_steps.map(step => `• ${step}`).join('\\n')}\n\n*Please note: This assessment is for informational purposes only and should not replace professional medical advice.*\n    `;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const quickResponses = [\n    \"I have a headache\",\n    \"I'm feeling nauseous\",\n    \"I have chest pain\",\n    \"I'm having trouble breathing\",\n    \"I have a fever\"\n  ];\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chat-header\">\n        <h3>🩺 Virtual Triage Assistant</h3>\n        <p>Describe your symptoms for personalized guidance</p>\n      </div>\n\n      <div className=\"chat-messages\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`message ${message.sender} ${message.isError ? 'error' : ''} ${message.isAssessment ? 'assessment' : ''}`}\n          >\n            <div className=\"message-content\">\n              <pre className=\"message-text\">{message.text}</pre>\n              <span className=\"message-time\">\n                {message.timestamp.toLocaleTimeString()}\n              </span>\n            </div>\n          </div>\n        ))}\n        \n        {isTyping && (\n          <div className=\"message bot typing\">\n            <div className=\"message-content\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"quick-responses\">\n        {quickResponses.map((response, index) => (\n          <button\n            key={index}\n            className=\"quick-response-btn\"\n            onClick={() => setInputMessage(response)}\n          >\n            {response}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"chat-input\">\n        <div className=\"input-container\">\n          <textarea\n            ref={inputRef}\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Describe your symptoms...\"\n            rows=\"2\"\n            disabled={isTyping}\n          />\n          <button\n            onClick={sendMessage}\n            disabled={!inputMessage.trim() || isTyping}\n            className=\"send-btn\"\n          >\n            Send\n          </button>\n        </div>\n      </div>\n\n      <div className=\"chat-disclaimer\">\n        <p>⚠️ This is not a substitute for professional medical advice. \n           In case of emergency, call 911 immediately.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}