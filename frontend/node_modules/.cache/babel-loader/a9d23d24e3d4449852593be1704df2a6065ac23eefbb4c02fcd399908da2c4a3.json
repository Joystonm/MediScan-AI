{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\MediScan-AI\\\\frontend\\\\src\\\\contexts\\\\LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n  const setLanguage = lang => {\n    setCurrentLanguage(lang);\n  };\n  const value = {\n    currentLanguage,\n    setLanguage\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"HhRqMEn9HShuQecympvEiHZE6jI=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","LanguageContext","LanguageProvider","children","_s","currentLanguage","setCurrentLanguage","setLanguage","lang","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/MediScan-AI/frontend/src/contexts/LanguageContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst LanguageContext = createContext();\n\nexport const LanguageProvider = ({ children }) => {\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n\n  const setLanguage = (lang) => {\n    setCurrentLanguage(lang);\n  };\n\n  const value = {\n    currentLanguage,\n    setLanguage\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,eAAe,gBAAGL,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMM,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMS,WAAW,GAAIC,IAAI,IAAK;IAC5BF,kBAAkB,CAACE,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMC,KAAK,GAAG;IACZJ,eAAe;IACfE;EACF,CAAC;EAED,oBACEP,OAAA,CAACC,eAAe,CAACS,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAN,QAAA,EACpCA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACV,EAAA,CAjBWF,gBAAgB;AAAAa,EAAA,GAAhBb,gBAAgB;AAmB7B,OAAO,MAAMc,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAGrB,UAAU,CAACI,eAAe,CAAC;EAC3C,IAAI,CAACiB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}